{-# LANGUAGE DataKinds #-}
{-# LANGUAGE EmptyCase #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE ViewPatterns #-}


module Models.Optimizer where

import Data.List
import TLC.Terms

type Re = Double

data Domain Œ≥ Œ± = Domain { domainConditions :: [Cond (Œ≥, Œ±)]
                         , domainLoBounds, domainHiBounds :: [Expr Œ≥ Œ±] }

-- positive :: Expr Œ≥ Re -> Cond Œ≥
-- positive e = negative ((-1) *^ e)

negative :: Expr Œ≥ Re -> Cond Œ≥
negative e = IsNegative e -- TODO: suggests renaming IsNegative ‚Ü¶ Negative

lessThan :: Expr Œ≥ Re -> Expr Œ≥ Re -> Cond Œ≥
t `lessThan` u = negative (t `add` ((-1) *^ u))

-- greaterThan :: Expr Œ≥ Re -> Expr Œ≥ Re -> Cond Œ≥
-- greaterThan = flip lessThan

-- | @domainToConditions x‚ÇÄ d@ creates the conditions corresponding to x‚ÇÄ ‚àà d.
domainToConditions :: Expr Œ≥ Re -> Domain Œ≥ Re -> P Œ≥ -> P Œ≥
domainToConditions i = \case
  Domain [] [] [] -> id
  Domain (c:cs) los his
    -> Cond (substCond (\Here -> i) c) . domainToConditions i (Domain cs los his)
  Domain cs (e:los) his
    -> Cond (e `lessThan` i) . domainToConditions i (Domain cs los his)
  Domain cs los (e:his)
    -> Cond (i `lessThan` e) . domainToConditions i (Domain cs los his)

data Available Œ± Œ≥ where
  Here :: Available Œ± (Œ≥, Œ±)
  There :: Available Œ± Œ≥ -> Available Œ± (Œ≥, Œ≤)
deriving instance Show (Available Œ± Œ≥)
 
data Expr Œ≥ Œ± = Expr Œ± [(Œ±, Available Œ± Œ≥)]
  -- linear combination. list of coefficients and variables [Œ± is a vector space]
  -- Example u - v is represented by [(1,"u"), (-1,"v")]


-- Induced vector space structure over Expr Œ≥ Œ±:

-- multiplication by scalar (expresions are linear)
(*^) :: Num Œ± => Œ± -> Expr Œ≥ Œ± -> Expr Œ≥ Œ±
c *^ Expr k0 xs = Expr (c * k0) [ (c * c', v) | (c',v) <- xs ]

-- addition
add :: Num Œ± => Expr Œ≥ Œ± -> Expr Œ≥ Œ± -> Expr Œ≥ Œ±
add (Expr a xs) (Expr a' xs') = Expr (a + a') (xs ++ xs')

zero = Expr 0 []

data Cond Œ≥ = IsNegative { condExpr :: (Expr Œ≥ Re) }
              -- Meaning of this constructor:  expression ‚â§ 0
              -- Example: u ‚â§ v is represented by u - v ‚â§ 0
            | IsZero { condExpr :: (Expr Œ≥ Re) }
              -- Meaning of this constructor:  expression = 0
              -- Example: u = v is represented by u - v = 0

restrictDomain :: Œ± ~ Re => Cond (Œ≥, Œ±) -> Domain Œ≥ Œ± -> Domain Œ≥ Œ±
  -- restrictDomain c (Domain cs' lowBounds highBounds) = Domain (c : cs') lowBounds highBounds
  -- basic version
restrictDomain c (Domain cs los his) = case solve' c of -- version with solver
  (LT, e) -> Domain cs los (e:his) 
  (GT, e) -> Domain cs (e:los) (his)

data P Œ≥ where
  Integrate :: (Re ~ d) => Domain Œ≥ d -> P (Œ≥, d) -> P Œ≥
  Cond :: Cond Œ≥ -> P Œ≥ -> P Œ≥
  Ret  :: Expr Œ≥ Re -> P Œ≥

type Subst Œ≥ Œ¥ = (forall x. Num x => Available x Œ≥ -> Expr Œ¥ x)

wkSubst :: Subst Œ≥ Œ¥ -> Subst (Œ≥, x) (Œ¥, x)
wkSubst f = \case
  Here -> Expr 0 [(1,Here)]
  There x -> Expr k0 [(c, There y) | (c,y) <- xs]
    where Expr k0 xs = f x

substExpr :: Subst Œ≥ Œ¥ -> forall x. Num x => Expr Œ≥ x -> Expr Œ¥ x
substExpr f (Expr k0 e) = foldr add (Expr k0 []) [c *^ f x | (c,x) <- e]

substCond :: Subst Œ≥ Œ¥ -> Cond Œ≥ -> Cond Œ¥
substCond f (IsNegative e) = IsNegative (substExpr f e)
substCond f (IsZero e) = IsZero (substExpr f e)

substDomain :: Num d => Subst Œ≥ Œ¥ -> Domain Œ≥ d -> Domain Œ¥ d
substDomain f (Domain c lo hi) = Domain (substCond (wkSubst f) <$> c) (substExpr f <$> lo) (substExpr f <$> hi)

substP :: Subst Œ≥ Œ¥ -> P Œ≥ -> P Œ¥
substP f p0 = case p0 of
  Ret e -> Ret (substExpr f e)
  Cond c p -> Cond (substCond f c) (substP f p)
  Integrate d p -> Integrate (substDomain f d) (substP (wkSubst f) p)

type family Eval Œ≥ where
  Eval R = Re
  Eval Unit = ()
  Eval (Œ≥ √ó Œ±) = (Eval Œ≥, Eval Œ±)

type family RepOf Œ≥ where
  RepOf Re = R
  RepOf () = Unit
  RepOf (Œ≥, Œ±) = (RepOf Œ≥ √ó RepOf Œ±)

evalVar :: Œ± ‚àà Œ≥ -> Available (Eval Œ±) (Eval Œ≥)
evalVar = \case
  Get -> Here
  Weaken (evalVar -> i) -> There i

pattern Eqs i j
  = Neu (NeuApp (NeuApp (NeuCon (Rl EqRl)) (Neu (NeuVar i))) (Neu (NeuVar j)))

pattern Mults x y
  = Neu (NeuApp (NeuApp (NeuCon (Rl Mult)) x) y)

evalP :: NF Œ≥ R -> P (Eval Œ≥) -> P (Eval Œ≥)
evalP = \case
  Eqs (evalVar -> i) (evalVar -> j) -> Cond (IsZero $ Expr 1 [(1, i), (-1, j)])
  Mults (evalP -> x) (evalP -> y) -> x . y
  
type Vars Œ≥  = forall v. Available v Œ≥ -> String

showExpr :: Show Œ± => Vars Œ≥ -> Expr Œ≥ Œ± -> String
showExpr v (Expr k0 xs) = intercalate " + " $
                          show k0 : [ parens $ show k ++ " * " ++ v x |
                                      (k, x) <- xs ]

showCond :: Vars Œ≥ -> Cond Œ≥ -> String
showCond v = \case
  c@(IsNegative c') -> "ùüô" <> (parens $ showExpr v c' <> " ‚â§ 0")
  c@(IsZero c') -> parens $ showExpr v c' ++ " ‚âê 0"

parens :: [Char] -> [Char]
parens x = "(" ++ x ++ ")"

braces :: [Char] -> [Char]
braces x = "{" ++ x ++ "}"

showBounds :: Show Œ± => Vars Œ≥ -> Bool -> [Expr Œ≥ Œ±] -> [Char]
showBounds _ lo [] = (if lo then "-" else "+") <> "‚àû"
showBounds v lo xs = (intercalate (if lo then "‚äî" else "‚äì") $ map (showExpr v) xs)

when :: [a] -> [Char] -> [Char]
when [] _ = ""
when _ x = x

showP :: [String] -> Vars Œ≥ -> P Œ≥ -> String
showP freshes@(f:fs) v = \case
  Ret x -> parens (showExpr v x)
  Integrate (Domain cs los his) e -> "‚à´"  ++ (when cs $ f ++ "‚àà" ++ braces (intercalate "‚àß" $ map (showCond (\case Here -> f; There i -> v i)) cs))
                 ++ (when (los ++ his) (braces (showBounds v True los
                            ++ "‚â§" ++ f ++ "‚â§" ++
                            showBounds v False his)))
                 ++ showP fs (\case Here -> f; There i -> v i) e
  Cond c e -> showCond v c ++ "*" ++ showP freshes v e

showProg :: P () -> String
showProg = showP freshes (\case)

freshes :: [String]
freshes = "" : map show ints >>= \i -> map (:i) ['x', 'y', 'z', 'u', 'v', 'w']
  where ints = 1 : map succ ints

instance Show (P ()) where
  show = showProg

type Solution Œ≥ d  = (Ordering, Expr Œ≥ d)

-- @solve e x@ returns the coefficient of the 1st variable in the expression, and the rest (terms not involving the 1st variable).
-- ie. c x + e = 0
solve :: (Œ± ~ Re) => Expr (Œ≥, Œ±) Œ± -> (Œ±, Expr Œ≥ Œ±)
solve (Expr k0 xs) = (c', Expr k0 e)
  where (c', e) = solveAffine xs

solveAffine :: (Œ± ~ Re)
            => [(Re, Available Re (Œ≥, Œ±))] -> (Œ±, [(Re, Available Re Œ≥)])
solveAffine ([]) = (0, [])
solveAffine ((c, Here) : xs) = (c + c', e)
  where (c', e) = solveAffine xs
solveAffine ((c, There x) : xs) = (c', (c, x) : e)
  where (c', e) = solveAffine xs 

-- FIXME: detect always true and always false cases.
solve' :: Cond (Œ≥, Re) -> Solution Œ≥ Re
solve' c0 = case c0 of
  IsZero _ -> (EQ, (-1 / c) *^ e)
  IsNegative _ -> if c < 0 then (GT, (1 / (-c)) *^ e) else (LT, (1 / c) *^ e)
  where (c, e) = solve (condExpr c0)
  
shallower :: SomeVar Œ≥ -> SomeVar Œ≥ -> Bool
SomeVar Here `shallower` _ = False
SomeVar (There _) `shallower` SomeVar Here = True
SomeVar (There x) `shallower` SomeVar (There y) = SomeVar x `shallower` SomeVar y

data SomeVar Œ≥ where
  SomeVar :: Available v Œ≥ -> SomeVar Œ≥

minVar :: SomeVar Œ≥ -> SomeVar Œ≥ -> SomeVar Œ≥
minVar (SomeVar Here) _ = SomeVar Here
minVar _ (SomeVar Here)  = SomeVar Here 
minVar (SomeVar (There x)) (SomeVar (There y))
  = case minVar (SomeVar x) (SomeVar y) of
      SomeVar z -> SomeVar (There z)

deepest :: Cond Œ≥ -> SomeVar Œ≥
deepest c = case condExpr c of
   (Expr _ e) -> foldr1 minVar . map SomeVar . map snd $ e

travExpr :: Applicative f => (forall v. Available v Œ≥ -> f (Available v Œ¥)) -> Expr Œ≥ t -> f (Expr Œ¥ t)
travExpr f (Expr k0 xs) = Expr k0 <$> (traverse (\(k, e) -> (k,) <$> f e) xs)

occurExpr :: Expr (Œ≥, x) t -> Maybe (Expr Œ≥ t)
occurExpr = travExpr $ \case
  Here -> Nothing
  There x -> Just x

integrate :: d ~ Re => Domain Œ≥ d -> P (Œ≥, d) -> P Œ≥
integrate d (Cond c@(IsNegative c') e) = case occurExpr c' of
  Nothing -> integrate (restrictDomain c d) e
  Just c'' -> cond (IsNegative c'') (integrate d e)
integrate d (Cond (IsZero c') e) = case occurExpr c' of
  Nothing ->
    -- We apply the rule: ‚à´ f(x) Œ¥(c x + k) dx = f(-k/c)   
    -- (The correct rule is: ‚à´ f(x) Œ¥(c x + k) dx = (1/abs c) * f(-k/c)
    -- HOWEVER, due to the way we generate the equalities, my hunch is
    -- that we already take into account this coefficient. To be
    -- investigated.)
    domainToConditions x0 d $ substP (\Here -> x0) e   
    where (coef, expr) = solve c'
          x0 = (-1 / coef) *^ expr
  Just c'' -> cond (IsZero c'') (integrate d e)
integrate d e = Integrate d e

cond :: Cond Œ≥ -> P Œ≥ -> P Œ≥
cond c (Cond c' e) = if (deepest c) `shallower` (deepest c')
                     then Cond c (Cond c' e)
                     else Cond c' (cond c e)
cond c (normalise -> e) = Cond c e

normalise :: P Œ≥ -> P Œ≥
normalise = \case
  Cond c (normalise -> e) -> cond c e
  Integrate d (normalise -> e) -> integrate d e
  Ret x -> Ret x

-- Domain without restriction
full :: Domain Œ≥ x
full = Domain [] [] []


exampleInEq :: P ()
exampleInEq = Integrate full $
              Cond (IsNegative (Expr 7 [(-1, Here)])) $
              Ret $ Expr 10 [(1, Here)]

-- >>> exampleInEq
-- ‚à´ùüô(7.0 + -1.0 * x ‚â§ 0)*(10.0 + 1.0 * x)

-- >>> normalise exampleInEq
-- ‚à´{7.0‚â§x‚â§+‚àû}(10.0 + 1.0 * x)

exampleEq :: P ()
exampleEq = Integrate full $
            Cond (IsZero (Expr 7 [(-1,Here)])) $
            Ret $ Expr 10 [(1, Here)]

-- >>> exampleEq
-- ‚à´(7.0 + -1.0 * x ‚âê 0)*(10.0 + 1.0 * x)

-- >>> normalise exampleEq
-- (17.0)

example :: P ()
example = Integrate full $ Integrate full $
          Cond (IsNegative (Expr 0 [(3, There Here), (2, Here)])) $
          Cond (IsNegative (Expr 2 [(1, There Here)])) $
          Ret $ Expr 1 []

-- >>> example
-- ‚à´‚à´ùüô(0.0 + 3.0 * x + 2.0 * y ‚â§ 0)*ùüô(2.0 + 1.0 * x ‚â§ 0)*(1.0)

-- >>> normalise example
-- ‚à´{-‚àû‚â§x‚â§2.0}‚à´{-‚àû‚â§y‚â§0.0 + 1.5 * x}(1.0)

example1 :: P ()
example1 = Integrate full $ Integrate full $
           Cond (IsZero (Expr 4 [(1, (There Here)), (-1, Here)])) $
           Ret $ Expr 1 []

-- >>> example1
-- ‚à´‚à´(4.0 + (1.0 * x) + (-1.0 * y) ‚âê 0)*(1.0)

-- >>> normalise example1
-- ‚à´(1.0)

example2 :: P ()
example2 = Integrate full $
           Integrate (Domain [] [Expr 1 [(1, Here)]] []) $
           Cond (IsZero (Expr 4 [(2, There Here), (-1, Here)]) ) $
           Ret $ Expr 0 [(1, Here)]

-- >>> example2
-- ‚à´‚à´{1.0 + (1.0 * x)‚â§y‚â§+‚àû}(4.0 + (2.0 * x) + (-1.0 * y) ‚âê 0)*(0.0 + (1.0 * y))

-- >>> normalise example2
-- ‚à´{-3.0‚â§x‚â§+‚àû}(4.0 + (2.0 * x))

example3 :: P ()
example3 = Integrate full $
           Integrate full $
           Cond (IsNegative (Expr 3 [(-1, Here)])) $
           Cond (IsZero (Expr 4 [(1, (There Here)), (-1, Here)]) ) $
           Ret $ Expr 0 [(1,Here)]

-- >>> example3
-- ‚à´‚à´ùüô(3.0 + (-1.0 * y) ‚â§ 0)*(4.0 + (1.0 * x) + (-1.0 * y) ‚âê 0)*(0.0 + (1.0 * y))

-- >>> normalise example3
-- ‚à´{-1.0‚â§x‚â§+‚àû}(4.0 + (1.0 * x))
