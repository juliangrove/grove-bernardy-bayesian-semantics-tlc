{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeOperators #-}

module Examples.RSA where

import Data.Ratio
import Prelude hiding (Monad(..))
import Models.Optimizer
import TLC.Terms

factor :: Œ≥ ‚ä¢ (R ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
factor
  = Lam (Lam (App (App (Con (General Mult)) (Var (Weaken Get))) (App (Var Get) TT)))
factor' x = App factor x

observe :: Œ≥ ‚ä¢ (T ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
observe = Lam (App factor (App (Con (General Indi)) (Var Get)))
observe' œÜ = App observe œÜ
 
normal :: Rational -> Rational -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
normal x y
  = App (Con $ General Nml) (Pair (Con $ General $ Incl x) (Con $ General $ Incl y))

uniform :: Rational -> Rational -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
uniform x y
  = App (Con $ General Uni) (Pair (Con $ General $ Incl x) (Con $ General $ Incl y))

distr :: Equality Œ± => Œ≥ ‚ä¢ ((Œ± ‚ü∂ 'R) ‚ü∂ 'R) -> Œ≥ ‚ä¢ (Œ± ‚ü∂ 'R)
distr p = Lam (App (wkn p) (Lam ((Var Get) ‚âê (Var (Weaken Get)))))

k :: Œ≥ ‚ä¢ ((Context ‚ü∂ R) ‚ü∂ R)
k = uniform (-1000) 1000
    ‚ãÜ Lam (normal 68 3
           ‚ãÜ Lam (
              Œ∑ (Pair
                 (Pair
                  (Pair
                   (Pair
                    (Pair
                     (Pair
                      (Pair
                       (Pair TT sel)
                       upd)
                      emp)
                     (‚â•))
                    (Var (Weaken Get)))
                   human)
                  (Lam (Var (Weaken Get))))
                 vlad)))

utts :: Œ≥ ‚ä¢ ((U ‚ü∂ R) ‚ü∂ R)
utts = Œ∑ (Con (General (Utt 2)))

utts' :: Œ≥ ‚ä¢ ((U ‚ü∂ R) ‚ü∂ R)
utts' = Lam
  (App
  (App (Con (General Addi)) (App (App (Con (General Mult)) (Con (General (Incl (1 % 2))))) (App (Var Get) (Con (General (Utt 1))))))
  (App (App (Con (General Mult)) (Con (General (Incl (1 % 2))))) (App (Var Get) (Con (General (Utt 2))))))

-- >>> displayVs utts'
-- (Œªx.((3 / 4 * x(U1)) + (1 / 4 * x(U2))))

-- >>> interp (Con $ General $ Utt 1)
-- (height(v) ‚â• Œ∏)

lower :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
lower m = App m (Lam (Var Get))

measure :: Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
measure m = App m (Lam (Con $ General $ Incl 1))

recipr :: Œ≥ ‚ä¢ R -> Œ≥ ‚ä¢ R
recipr m = App (App (Con (General Divi)) (Con (General (Incl (1 % 1))))) m

normalize :: Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R)
normalize m = m ‚ãÜ Lam (factor' (recipr $ measure $ wkn m) >> Œ∑ (Var Get))

expectedValue :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
expectedValue m = App (App (Con $ General $ Divi) (lower m)) (measure m)



-- | RSA

-- | Pragmatic listener
l1 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l1 = Lam (k ‚ãÜ Lam (
             factor' (App (distr (App s1 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))
     
-- | Pragmatic speaker
s1 :: Œ≥ ‚ä¢ (Context ‚ü∂ ((U ‚ü∂ R) ‚ü∂ R))
s1 = Lam (utts' ‚ãÜ Lam (
             factor' (App (distr (App l0 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

-- | Literal listener
l0 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l0 = Lam (k ‚ãÜ Lam (
             observe'
             (App (App (Con (General Interp)) (Var (Weaken Get))) (Var Get)) >>
             Œ∑ (Var Get)))

l0Distr :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
l0Distr = distr $ App l0 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (height `App` vlad)) (Var Get)))

-- >>> interp (u 2)
-- (Œ∏ ‚â• height(v))

test :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
test = distr $ uniform 0 10 ‚ãÜ Lam (uniform 0 10 ‚ãÜ Lam (Œ∑ ((Con (General Addi)) `App` (Var Get) `App` (Var (Weaken Get)))))

-- >>>  displayVs $ evalŒ≤ $ clean $ evalŒ≤ test
-- (Œªx.Uniform(‚ü®0, 10‚ü©)(Œªy.Uniform(‚ü®0, 10‚ü©)(Œªz.((z + y) ‚âê x))))

-- >>> mathematicaFun test
-- ùüô(-20 + x ‚â§ 0) * ùüô(-10 + x + (-1 * x) ‚â§ 0) * ùüô((-1 * x) ‚â§ 0) * Integrate[((1 / 100)), {y, Max[-10 + x, Max[0, -Infinity]], Min[x, Min[10, Infinity]]}]

-- >>> displayVs $ evalŒ≤ $ l1
-- (Œªx.(Œªy.Uniform(‚ü®50, 100‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.((((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªv.Normal(‚ü®68, 3‚ü©)(Œªw.(ùüô(‚ü¶U1‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü© ‚âê ‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªx1.u)‚ü©, v‚ü©)))) * (U1 ‚âê x))) + ((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªv.Normal(‚ü®68, 3‚ü©)(Œªw.(ùüô(‚ü¶U2‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü© ‚âê ‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªx1.u)‚ü©, v‚ü©)))) * (U2 ‚âê x)))) * y(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©))))))

-- >>> displayVs $ evalŒ≤ $ s1
-- (Œªx.(Œªy.(((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.(ùüô(‚ü¶U1‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü© ‚âê x)))) * y(U1))) + ((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.(ùüô(‚ü¶U2‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü© ‚âê x)))) * y(U2))))))

-- >>> mathematica $ expectedValue $ App l0 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (App height vlad)) (Var Get)))
-- (Integrate[Integrate[(((1 / 2000) * y)) * (((100000000000 / 751988482389) * Exp[((-2312 / 9) + ((-1 / 18) * y^2) + ((68 / 9) * y))])), {y, Max[x, -Infinity], Infinity}], {x, Max[-1000, -Infinity], Min[1000, Infinity]}]) / (Integrate[Integrate[((1 / 2000)) * (((100000000000 / 751988482389) * Exp[((-2312 / 9) + ((-1 / 18) * y^2) + ((68 / 9) * y))])), {y, Max[x, -Infinity], Infinity}], {x, Max[-1000, -Infinity], Min[1000, Infinity]}])

-- >>> displayVs $ clean $ evalŒ≤ $ subEq $ (Pair TT vlad) ‚âê (Pair TT vlad)
-- 1 / 1

-- >>> :set -XLambdaCase -XEmptyCase -XTypeApplications -XDataKinds
-- >>> mathematica $ expectedValue $ App l1 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (App height vlad)) (Var Get)))
-- ((Integrate[Integrate[(((1 / 8000000) * y)) * (((10000000000000000000000 / 565486677645711363147321) * Exp[((-4624 / 9) + ((-1 / 18) * y*y) + ((68 / 9) * y) + ((-1 / 18) * y*y) + ((68 / 9) * y))])), {y, Max[-1000, Max[x, -Infinity]], Infinity}], {x, Max[-1000, Max[-1000, -Infinity]], Min[1000, Min[1000, Infinity]]}]) + (Integrate[Integrate[0, {y, -Infinity, Min[1000, Min[x, Infinity]]}], {x, Max[-1000, Max[-1000, -Infinity]], Min[1000, Min[1000, Infinity]]}])) / ((Integrate[Integrate[((1 / 8000000)) * (((10000000000000000000000 / 565486677645711363147321) * Exp[((-4624 / 9) + ((-1 / 18) * y*y) + ((68 / 9) * y) + ((-1 / 18) * y*y) + ((68 / 9) * y))])), {y, Max[-1000, Max[x, -Infinity]], Infinity}], {x, Max[-1000, Max[-1000, -Infinity]], Min[1000, Min[1000, Infinity]]}]) + (Integrate[Integrate[0, {y, -Infinity, Min[1000, Min[x, Infinity]]}], {x, Max[-1000, Max[-1000, -Infinity]], Min[1000, Min[1000, Infinity]]}]))

-- >>> mathematicaFun $ distr $ App l1 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (App height vlad)) (Var Get)))
-- (Integrate[((1 / 8000000)) * (((10000000000000000000000 / 565486677645711363147321) * Exp[((-4624 / 9) + ((-1 / 18) * x*x) + ((68 / 9) * x) + ((-1 / 18) * x*x) + ((68 / 9) * x))])), {y, Max[-1000, Max[-1000, -Infinity]], Min[1000, Min[x, Min[1000, Infinity]]]}]) + (Integrate[0, {y, Max[-1000, Max[x, Max[-1000, -Infinity]]], Min[1000, Min[1000, Infinity]]}])

-- >>> mathematicaFun $ evalŒ≤ $ distr $ normal 0 10 ‚ãÜ Lam (normal 0 10 ‚ãÜ Lam (Œ∑ (App (App (Con (General Addi)) (Var Get)) (Var (Weaken Get)))))
-- Integrate[(((100000000000000000000 / 62831853071745707016369) * Exp[(((-1 / 200) * y*y) + ((-1 / 200) * y*y) + ((1 / 200) * x*y) + ((1 / 200) * y*x) + ((-1 / 200) * x*x))])), {y}]

-- >>> distr $ normal 0 1
-- Œª(Normal(‚ü®0, 1‚ü©)(Œª((x ‚âê x'))))
