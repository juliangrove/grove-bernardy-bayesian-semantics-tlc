{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeOperators #-}

module Examples.RSA where

import Data.Ratio
import Prelude hiding (Monad(..))
import Models.Optimizer
import TLC.Terms

factor :: Œ≥ ‚ä¢ (R ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
factor
  = Lam (Lam (App (App (Con (General Mult)) (Var (Weaken Get))) (App (Var Get) TT)))
factor' x = App factor x

observe :: Œ≥ ‚ä¢ (T ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
observe = Lam (App factor (App (Con (General Indi)) (Var Get)))
observe' œÜ = App observe œÜ
 
normal :: Rational -> Rational -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
normal x y
  = App (Con $ General Nml) (Pair (Con $ General $ Incl x) (Con $ General $ Incl y))

uniform :: Rational -> Rational -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
uniform x y
  = App (Con $ General Uni) (Pair (Con $ General $ Incl x) (Con $ General $ Incl y))

lesbegue :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
lesbegue = Con $ General Les

distr :: Equality Œ± => Œ≥ ‚ä¢ ((Œ± ‚ü∂ 'R) ‚ü∂ 'R) -> Œ≥ ‚ä¢ (Œ± ‚ü∂ 'R)
distr p = Lam (App (wkn p) (Lam ((Var Get) ‚âê (Var (Weaken Get)))))

k :: Œ≥ ‚ä¢ ((Context ‚ü∂ R) ‚ü∂ R)
k = uniform 0 1000
  ‚ãÜ Lam (normal 68 3
         ‚ãÜ Lam
          (Œ∑ (Pair
              (Pair
               (Pair
                (Pair
                 (Pair
                  (Pair
                   (Pair
                    (Pair TT sel)
                    upd)
                   emp)
                  (‚â•))
                  (Var (Weaken Get)))
                 human)
                (Lam (Var (Weaken Get))))
               vlad)))

utts :: Œ≥ ‚ä¢ ((U ‚ü∂ R) ‚ü∂ R)
utts = Œ∑ (Con (General (Utt 1)))

utts' :: Œ≥ ‚ä¢ ((U ‚ü∂ R) ‚ü∂ R)
utts' = Lam
  (App
  (App (Con (General Addi)) (App (App (Con (General Mult)) (Con (General (Incl (1 % 2))))) (App (Var Get) (Con (General (Utt 1))))))
  (App (App (Con (General Mult)) (Con (General (Incl (1 % 2))))) (App (Var Get) (Con (General (Utt 2))))))

updctx :: Œ≥ ‚ä¢ Context -> Œ≥ ‚ä¢ (R ‚ü∂ Context)
updctx k = Lam (Pair
                (Pair (Fst (Fst $ wkn k))
                 (Lam (Var (Weaken Get))))
                (œÄ Get $ wkn k))

-- >>> displayVs utts'
-- (Œªx.((3 / 4 * x(U1)) + (1 / 4 * x(U2))))

-- >>> interp (Con $ General $ Utt 1)
-- (height(v) ‚â• Œ∏)

lower :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
lower m = App m (Lam (Var Get))

measure :: Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
measure m = App m (Lam (Con $ General $ Incl 1))

recipr :: Œ≥ ‚ä¢ R -> Œ≥ ‚ä¢ R
recipr m = App (App (Con (General Divi)) (Con (General (Incl (1 % 1))))) m

normalize :: Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R)
normalize m = m ‚ãÜ Lam (factor' (recipr $ measure $ wkn m) >> Œ∑ (Var Get))

expectedValue :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
expectedValue m = App (App (Con $ General $ Divi) (lower m)) (measure m)


-- | RSA

-- | Pragmatic listener
l1 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l1 = Lam (k ‚ãÜ Lam (
             factor' (App (distr (App s1 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

l2 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l2 = Lam (k ‚ãÜ Lam (
             factor' (App (distr (App s2 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

l3 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l3 = Lam (k ‚ãÜ Lam (
             factor' (App (distr (App s3 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))
 
     
-- | Pragmatic speaker
s1 :: Œ≥ ‚ä¢ (Context ‚ü∂ ((U ‚ü∂ R) ‚ü∂ R))
s1 = Lam (utts' ‚ãÜ Lam (
             factor' (App (distr (App l0 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

s2 :: Œ≥ ‚ä¢ (Context ‚ü∂ ((U ‚ü∂ R) ‚ü∂ R))
s2 = Lam (utts' ‚ãÜ Lam (
             factor' (App (distr (App l1 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

s3 :: Œ≥ ‚ä¢ (Context ‚ü∂ ((U ‚ü∂ R) ‚ü∂ R))
s3 = Lam (utts' ‚ãÜ Lam (
             factor' (App (distr (App l2 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

-- | Literal listener
l0 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l0 = Lam (k ‚ãÜ Lam (
             observe'
             (App (App (Con (General Interp)) (Var (Weaken Get))) (Var Get)) >>
             Œ∑ (Var Get)))

l0Distr :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
l0Distr = distr $ normalize $ App l0 (u 2) ‚ãÜ Lam (Œ∑ (App (hmorph (height `App` vlad)) (Var Get)))

l1Distr :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
l1Distr = distr $ normalize $ App l1 (u 2) ‚ãÜ Lam (Œ∑ (App (hmorph (height `App` vlad)) (Var Get)))

-- >>> interp (u 2)
-- (Œ∏ ‚â• height(v))

test :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
test = distr $ uniform 0 10 ‚ãÜ Lam (uniform 0 10 ‚ãÜ Lam (Œ∑ ((Con (General Addi)) `App` (Var Get) `App` (Var (Weaken Get)))))

-- >>>  displayVs $ evalŒ≤ $ clean $ evalŒ≤ test
-- (Œªx.Uniform(‚ü®0, 10‚ü©)(Œªy.Uniform(‚ü®0, 10‚ü©)(Œªz.((z + y) ‚âê x))))

utility' :: Œ≥ ‚ä¢ (Context ‚ü∂ (U ‚ü∂ R))
utility' = Lam (distr $ normalize $ App s1 (Var Get))

utility :: Int -> Œ≥ ‚ä¢ (Context ‚ü∂ R)
utility n = Lam (App (App utility' (Var Get)) (u n))

exp1 = Lam (App k $ Lam (App (utility 1) (App (updctx (Var Get)) (Var (Weaken Get)))))

exp2 = Lam (App k $ Lam (App (utility 2) (App (updctx (Var Get)) (Var (Weaken Get)))))

-- >>> interp (u 1)
-- (height(v) ‚â• Œ∏)

-- >>> mathematicaFun exp1
-- Integrate[Integrate[((((3125000000000000000000000000000000000000000 / 35530575843864963945731199109133939604305497449) * Exp[((-24121 / 36) + ((-1 / 32) * y^2) + ((25 / 8) * y) + ((-1 / 18) * z^2) + ((68 / 9) * z) + ((-1 / 32) * y^2) + ((25 / 8) * y) + ((-1 / 18) * x^2) + ((68 / 9) * x))]))) / ((Boole[y + (-1 * x) ‚â§ 0] * (((1250000000000000000000 / 188495559215237121049107) * Exp[((-24121 / 72) + ((-1 / 32) * y^2) + ((25 / 8) * y) + ((-1 / 18) * x^2) + ((68 / 9) * x))]))) + (Boole[x + (-1 * y) ‚â§ 0] * (((1250000000000000000000 / 188495559215237121049107) * Exp[((-24121 / 72) + ((-1 / 32) * y^2) + ((25 / 8) * y) + ((-1 / 18) * x^2) + ((68 / 9) * x))])))), {z, -Infinity, Infinity}], {y, -Infinity, Min[x, Infinity]}]

-- >>> displayVs $ evalŒ≤ $ l1
-- (Œªx.(Œªy.Normal(‚ü®50, 4‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.((((1 / 2) * (Normal(‚ü®50, 4‚ü©)(Œªv.Normal(‚ü®68, 3‚ü©)(Œªw.(ùüô(‚ü¶U1‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü© ‚âê ‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªx1.u)‚ü©, v‚ü©)))) * (U1 ‚âê x))) + ((1 / 2) * (Normal(‚ü®50, 4‚ü©)(Œªv.Normal(‚ü®68, 3‚ü©)(Œªw.(ùüô(‚ü¶U2‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, v‚ü©, human‚ü©, (Œªx1.w)‚ü©, v‚ü© ‚âê ‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªx1.u)‚ü©, v‚ü©)))) * (U2 ‚âê x)))) * y(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©))))))

-- >>> displayVs $ evalŒ≤ $ s1
-- (Œªx.(Œªy.(((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.(ùüô(‚ü¶U1‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü© ‚âê x)))) * y(U1))) + ((1 / 2) * (Uniform(‚ü®50, 100‚ü©)(Œªz.Normal(‚ü®68, 3‚ü©)(Œªu.(ùüô(‚ü¶U2‚üß(‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü©)) * (‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ü®‚ãÑ, sel‚ü©, (‚à∑)‚ü©, Œµ‚ü©, (‚â•)‚ü©, z‚ü©, human‚ü©, (Œªv.u)‚ü©, v‚ü© ‚âê x)))) * y(U2))))))

someExample :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
someExample = distr $ normalize $ App l1 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (Œ∏)) (Var Get)))

-- >>> :t someExample
-- someExample :: Œ≥ ‚ä¢ ('R ‚ü∂ 'R)
                                                    
-- >>> mathematicaFun $ distr $ normalize $ App l1 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (Œ∏)) (Var Get)))
-- Boole[-100 ‚â§ 0] * Boole[(-1 * x) ‚â§ 0] * Boole[-100 + x ‚â§ 0] * Boole[-100 + x ‚â§ 0] * Boole[(-1 * x) ‚â§ 0] * Integrate[(((500000000000000000 / 565486677645711363147321))) / (Boole[-100 ‚â§ 0] * Boole[-100 ‚â§ 0] * Boole[-100 ‚â§ 0] * Integrate[Integrate[((500000000000000000 / 565486677645711363147321)), {u, Max[0, Max[z, -Infinity]], Infinity}], {z, Max[0, Max[0, -Infinity]], Min[100, Min[100, Infinity]]}]), {y, Max[0, Max[x, -Infinity]], Infinity}]

-- >>> displayVs $ clean $ evalŒ≤ $ subEq $ (Pair TT vlad) ‚âê (Pair TT vlad)
-- 1 / 1

-- >>> :set -XLambdaCase -XEmptyCase -XTypeApplications -XDataKinds
-- >>> mathematica $ expectedValue $ App l0 (u 1) ‚ãÜ Lam (Œ∑ (App (hmorph (App height vlad)) (Var Get)))
-- (Integrate[Integrate[(((2500000000000000000000 / 188495559215237121049107) * y * Exp[((-24121 / 72) + ((-1 / 32) * x^2) + ((25 / 8) * x) + ((-1 / 18) * y^2) + ((68 / 9) * y))])), {y, Max[x, -Infinity], Infinity}], {x, -Infinity, Infinity}]) / (Integrate[Integrate[(((2500000000000000000000 / 188495559215237121049107) * Exp[((-24121 / 72) + ((-1 / 32) * x^2) + ((25 / 8) * x) + ((-1 / 18) * y^2) + ((68 / 9) * y))])), {y, Max[x, -Infinity], Infinity}], {x, -Infinity, Infinity}])

-- >>> mathematicaFun $ distr $ normalize $ App l0 (u 2) ‚ãÜ Lam (Œ∑ (App (hmorph (Œ∏)) (Var Get)))
-- Boole[(-1 * x) ‚â§ 0] * Boole[-1000 + x ‚â§ 0] * Integrate[((((100000000 / 751988482389) * Exp[((-2312 / 9) + ((-1 / 18) * y^2) + ((68 / 9) * y))]))) / (Integrate[Integrate[(((100000000 / 751988482389) * Exp[((-2312 / 9) + ((-1 / 18) * u^2) + ((68 / 9) * u))])), {u, -Infinity, Min[z, Infinity]}], {z, Max[0, -Infinity], Min[1000, Infinity]}]), {y, -Infinity, Min[x, Infinity]}]

-- >>> mathematicaFun $ evalŒ≤ $ distr $ normal 0 10 ‚ãÜ Lam (normal 0 10 ‚ãÜ Lam (Œ∑ (App (App (Con (General Addi)) (Var Get)) (Var (Weaken Get)))))
-- Integrate[((100000000000000000000 / 62831853071745707016369)), {y, -Infinity, Infinity}]

-- >>> distr $ normal 0 1
-- Œª(Normal(‚ü®0, 1‚ü©)(Œª((x ‚âê x'))))
