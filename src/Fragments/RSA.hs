{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE TypeOperators #-}

module Fragments.RSA where

import Prelude hiding (Monad(..))
import TLC.Terms

factor :: Œ≥ ‚ä¢ (R ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
factor = Lam (Lam (App (App (Con (Rl Mult)) (Var (Weaken Get))) (App (Var Get) TT)))
factor' x = App factor x

observe :: Œ≥ ‚ä¢ (T ‚ü∂ ((Unit ‚ü∂ R) ‚ü∂ R))
observe = Lam (App factor (App (Con (Rl Indi)) (Var Get)))
observe' œÜ = App observe œÜ
 
normal :: Double -> Double -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
normal x y = App (Con $ Rl Nml) (Pair (Con $ Rl $ Incl x) (Con $ Rl $ Incl y))

uniform :: Double -> Double -> Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R)
uniform x y = App (Con $ Rl Uni) (Pair (Con $ Rl $ Incl x) (Con $ Rl $ Incl y))

u i = Con $ Special $ Utt i

vlad = Con $ Special Vlad
height = Con $ Special Height
human = Con $ Special Human
Œ∏ = Con $ Special Theta
(‚â•) = Con $ Special GTE
emp = Con $ Special Empty
upd = Con $ Special Upd
sel = Con $ Special Sel

(/\) :: Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T
p /\ q = App (App (Con (Logical And)) p) q

(\/) :: Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T
p \/ q = App (App (Con (Logical Or)) p) q

(-->) :: Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T -> Œ≥ ‚ä¢ T
p --> q = App (App (Con (Logical Imp)) p) q

exists :: Œ≥ ‚ä¢ (Œ± ‚ü∂ T) -> Œ≥ ‚ä¢ T
exists œÜ = App (Con (Logical Exists)) œÜ

distr :: Œ≥ ‚ä¢ ((Œ± ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ (Œ± ‚ü∂ R)
distr p = App (Con (Rl Distr)) p

k :: Œ≥ ‚ä¢ ((Context ‚ü∂ R) ‚ü∂ R)
k = uniform 0 100 >>= Lam (normal 68 3 >>= Lam (Œ∑ (Pair vlad (Pair (Lam (Var (Weaken Get))) (Pair human (Pair (Var (Weaken Get)) (Pair (‚â•) (Pair emp (Pair upd (Pair sel TT))))))))))

utts :: Œ≥ ‚ä¢ ((U ‚ü∂ R) ‚ü∂ R)
utts = Œ∑ (Con (Special (Utt 1)))

interp :: Œ≥ ‚ä¢ U -> Œ≥ ‚ä¢ T
interp (Con (Special (Utt 1))) = App (App (‚â•) (App height vlad)) Œ∏

-- >>> interp (Con $ Special $ Utt 1)
-- ‚àÉ(Œª((human(x) ‚àß (height(x) ‚â• Œ∏))))

lower :: Œ≥ ‚ä¢ ((R ‚ü∂ R) ‚ü∂ R) -> Œ≥ ‚ä¢ R
lower m = App m (Lam (Var Get))

-- | RSA

-- | Pragmatic listener
l1 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l1 = Lam (k >>= Lam (
             factor' (App (distr (App s1 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

-- | Pragmatic speaker
s1 :: Œ≥ ‚ä¢ (Context ‚ü∂ ((U ‚ü∂ R) ‚ü∂ R))
s1 = Lam (utts >>= Lam (
             factor' (App (distr (App l0 (Var Get))) (Var (Weaken Get))) >>
             Œ∑ (Var Get)))

-- | Literal listener
l0 :: Œ≥ ‚ä¢ (U ‚ü∂ ((Context ‚ü∂ R) ‚ü∂ R))
l0 = Lam (k >>= Lam (
             observe' (App (hmorph (interp (Con (Special (Utt 1))))) (Var Get)) >>
             Œ∑ (Var Get)))



-- >>> evalŒ≤ $ lower $ App l1 (u 1) >>= Lam (Œ∑ (App (hmorph (App height vlad)) (Var Get)))
-- Uniform(‚ü®0.0, 100.0‚ü©)(Œª(Normal(‚ü®68.0, 3.0‚ü©)(Œª((Distr(Œª((Distr(Œª(Uniform(‚ü®0.0, 100.0‚ü©)(Œª(Normal(‚ü®68.0, 3.0‚ü©)(Œª((ùüô((x ‚â• x')) * x''(‚ü®v, ‚ü®Œª(x'), ‚ü®human, ‚ü®x', ‚ü®(‚â•), ‚ü®Œµ, ‚ü®(‚à∑), ‚ü®sel, ‚ãÑ‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©))))))))(‚ü®v, ‚ü®Œª(x''), ‚ü®human, ‚ü®x'', ‚ü®(‚â•), ‚ü®Œµ, ‚ü®(‚à∑), ‚ü®sel, ‚ãÑ‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©‚ü©) * x(U1))))(U1) * x)))))
